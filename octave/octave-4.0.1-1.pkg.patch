--- origsrc/octave-4.0.1/scripts/pkg/module.mk	2015-12-11 17:10:50.000000000 +0100
+++ src/octave-4.0.1/scripts/pkg/module.mk	2016-03-22 15:37:21.000000000 +0100
@@ -3,6 +3,7 @@ FCN_FILE_DIRS += pkg
 pkg_PRIVATE_FCN_FILES = \
   pkg/private/build.m \
   pkg/private/configure_make.m \
+  pkg/private/copy_built_files.m \
   pkg/private/copy_files.m \
   pkg/private/create_pkgadddel.m \
   pkg/private/default_prefix.m \
@@ -32,7 +33,6 @@ pkg_PRIVATE_FCN_FILES = \
   pkg/private/prepare_installation.m \
   pkg/private/print_package_description.m \
   pkg/private/rebuild.m \
-  pkg/private/repackage.m \
   pkg/private/save_order.m \
   pkg/private/shell.m \
   pkg/private/uninstall.m \
--- origsrc/octave-4.0.1/scripts/pkg/pkg.m	2015-12-11 17:10:50.000000000 +0100
+++ src/octave-4.0.1/scripts/pkg/pkg.m	2016-03-22 15:35:39.000000000 +0100
@@ -523,7 +523,7 @@ function [local_packages, global_package
       if (numel (files) < 2)
         error ("you must specify at least the build directory and one filename\nwhen calling 'pkg build'");
       endif
-      build (files, deps, auto, verbose);
+      build (files{1}, files(2:end), verbose);
 
     case "describe"
       if (isempty (files))
--- origsrc/octave-4.0.1/scripts/pkg/private/build.m	2015-04-28 18:12:02.000000000 +0200
+++ src/octave-4.0.1/scripts/pkg/private/build.m	2016-03-22 15:42:08.000000000 +0100
@@ -18,15 +18,23 @@
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
-## @deftypefn {Function File} {} build (@var{files}, @var{handle_deps}, @var{autoload}, @var{verbose})
-## Undocumented internal function.
+## @deftypefn {} {} build (@var{builddir}, @var{tarballs}, @var{verbose})
+## Prepare binary packages from Octave source packages.
+##
+## Boils down to (for each in @var{tarballs}):
+##
+## @enumerate
+## @item untar the tarball in @var{builddir};
+## @item build anything necessary (configure and make);
+## @item repackage specifying the build arch in the tarball filename.
+## @end enumerate
+##
 ## @end deftypefn
 
-function build (files, handle_deps, autoload, verbose)
-  if (length (files) < 1)
-    error ("insufficient number of files");
+function build (builddir, tarballs, verbose)
+  if (nargin != 3)
+    print_usage ();
   endif
-  builddir = files{1};
   if (! exist (builddir, "dir"))
     warning ("creating build directory %s", builddir);
     [status, msg] = mkdir (builddir);
@@ -34,31 +42,42 @@ function build (files, handle_deps, auto
       error ("could not create installation directory: %s", msg);
     endif
   endif
-  [builddir, status] = canonicalize_file_name (builddir);
-  if (status != 0)
-    error ("cannot find directory %s", builddir);
-  endif
-  installdir = fullfile (builddir, "install");
-  if (! exist (installdir, "dir"))
-    [status, msg] = mkdir (installdir);
-    if (status != 1)
-      error ("could not create installation directory: %s", msg);
-    endif
-  endif
-  files(1) = [];
-  buildlist = fullfile (builddir, "octave_packages");
-  install (files, handle_deps, autoload, installdir, installdir, verbose,
-           buildlist, "", false);
-  unwind_protect
-    repackage (builddir, buildlist);
-  unwind_protect_cleanup
-    unload_packages ({"all"}, handle_deps, buildlist, "");
-    if (exist (installdir, "dir"))
-      rmdir (installdir, "s");
-    endif
-    if (exist (buildlist, "file"))
-      unlink (buildlist);
+
+  for i = 1:numel(tarballs)
+    filelist = unpack (tarballs{i}, builddir);
+    [~, root_idx] = min (cellfun ("numel", filelist));
+    package_root = filelist{root_idx};
+    build_root = fullfile (builddir, filelist{root_idx});
+
+    desc = get_description (fullfile (build_root, "DESCRIPTION"));
+
+    ## If there is no configure or Makefile within src/, there is nothing
+    ## to do to prepare a "binary" package.  We only repackage to add more
+    ## info on the filename (version and arch).
+    if (! exist (fullfile (build_root, "src", "configure"), "file")
+        && ! exist (fullfile (build_root, "src", "Makefile"), "file"))
+      arch_abi = "any-none";
+    else
+      arch_abi = getarch ();
+      configure_make (desc, build_root, verbose);
+      unlink (fullfile (build_root, "src", "configure"));
+      unlink (fullfile (build_root, "src", "Makefile"));
     endif
-  end_unwind_protect
-endfunction
+    tfile = [desc.name "-" desc.version "-" arch_abi ".tar"];
 
+    init_wd = pwd ();
+    unwind_protect
+      chdir (builddir);
+      try
+        tar (tfile, package_root);
+        rmdir (package_root, "s");
+        gzip (tfile);
+        unlink (tfile);
+      catch
+        warning ("failed to create and compress %s", tfile);
+      end_try_catch
+    unwind_protect_cleanup
+      chdir (init_wd);
+    end_unwind_protect
+  endfor
+endfunction
--- origsrc/octave-4.0.1/scripts/pkg/private/configure_make.m	2015-12-11 17:10:50.000000000 +0100
+++ src/octave-4.0.1/scripts/pkg/private/configure_make.m	2016-03-22 15:44:31.000000000 +0100
@@ -51,8 +51,7 @@ function configure_make (desc, packdir,
 
     cenv = {"MKOCTFILE"; mkoctfile_program;
             "OCTAVE_CONFIG"; octave_config_program;
-            "OCTAVE"; octave_binary;
-            "INSTALLDIR"; desc.dir};
+            "OCTAVE"; octave_binary};
     scenv = sprintf ("%s='%s' ", cenv{:});
 
     ## Configure.
@@ -70,8 +69,7 @@ function configure_make (desc, packdir,
       if (isempty (getenv ("RANLIB")))
         flags = [flags ' RANLIB="' mkoctfile("-p", "RANLIB") '"'];
       endif
-      cmd = ["cd '" src "'; " ...
-             scenv "./configure --prefix=\"" desc.dir "\"" flags];
+      cmd = ["cd '" src "'; " scenv "./configure " flags];
       [status, output] = shell (cmd, verbose);
       if (status != 0)
         rmdir (desc.dir, "s");
@@ -97,85 +95,5 @@ function configure_make (desc, packdir,
       endif
     endif
 
-    ## Copy files to "inst" and "inst/arch" (this is instead of 'make
-    ## install').
-    files = fullfile (src, "FILES");
-    instdir = fullfile (packdir, "inst");
-    archdir = fullfile (packdir, "inst", getarch ());
-
-    ## Get file names.
-    if (exist (files, "file"))
-      [fid, msg] = fopen (files, "r");
-      if (fid < 0)
-        error ("couldn't open %s: %s", files, msg);
-      endif
-      filenames = char (fread (fid))';
-      fclose (fid);
-      if (filenames(end) == "\n")
-        filenames(end) = [];
-      endif
-      filenames = strtrim (ostrsplit (filenames, "\n"));
-      delete_idx = [];
-      for i = 1:length (filenames)
-        if (! all (isspace (filenames{i})))
-          filenames{i} = fullfile (src, filenames{i});
-        else
-          delete_idx(end+1) = i;
-        endif
-      endfor
-      filenames(delete_idx) = [];
-    else
-      m = dir (fullfile (src, "*.m"));
-      oct = dir (fullfile (src, "*.oct"));
-      mex = dir (fullfile (src, "*.mex"));
-
-      filenames = cellfun (@(x) fullfile (src, x),
-                           {m.name, oct.name, mex.name},
-                           "uniformoutput", false);
-    endif
-
-    ## Split into architecture dependent and independent files.
-    if (isempty (filenames))
-      idx = [];
-    else
-      idx = cellfun ("is_architecture_dependent", filenames);
-    endif
-    archdependent = filenames(idx);
-    archindependent = filenames(!idx);
-
-    ## Copy the files.
-    if (! all (isspace ([filenames{:}])))
-        if (! exist (instdir, "dir"))
-          mkdir (instdir);
-        endif
-        if (! all (isspace ([archindependent{:}])))
-          if (verbose)
-            printf ("copyfile");
-            printf (" %s", archindependent{:});
-            printf ("%s\n", instdir);
-          endif
-          [status, output] = copyfile (archindependent, instdir);
-          if (status != 1)
-            rmdir (desc.dir, "s");
-            error ("Couldn't copy files from 'src' to 'inst': %s", output);
-          endif
-        endif
-        if (! all (isspace ([archdependent{:}])))
-          if (verbose)
-            printf ("copyfile");
-            printf (" %s", archdependent{:});
-            printf (" %s\n", archdir);
-          endif
-          if (! exist (archdir, "dir"))
-            mkdir (archdir);
-          endif
-          [status, output] = copyfile (archdependent, archdir);
-          if (status != 1)
-            rmdir (desc.dir, "s");
-            error ("Couldn't copy files from 'src' to 'inst': %s", output);
-          endif
-        endif
-    endif
   endif
 endfunction
-
--- origsrc/octave-4.0.1/scripts/pkg/private/copy_built_files.m	1970-01-01 01:00:00.000000000 +0100
+++ src/octave-4.0.1/scripts/pkg/private/copy_built_files.m	2016-03-22 15:35:39.000000000 +0100
@@ -0,0 +1,110 @@
+## Copyright (C) 2005-2015 SÃ¸ren Hauberg
+## Copyright (C) 2010 VZLU Prague, a.s.
+##
+## This file is part of Octave.
+##
+## Octave is free software; you can redistribute it and/or modify it
+## under the terms of the GNU General Public License as published by
+## the Free Software Foundation; either version 3 of the License, or (at
+## your option) any later version.
+##
+## Octave is distributed in the hope that it will be useful, but
+## WITHOUT ANY WARRANTY; without even the implied warranty of
+## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+## General Public License for more details.
+##
+## You should have received a copy of the GNU General Public License
+## along with Octave; see the file COPYING.  If not, see
+## <http://www.gnu.org/licenses/>.
+
+## -*- texinfo -*-
+## @deftypefn {} {} copy_built_files (@var{desc}, @var{packdir}, @var{verbose})
+## Undocumented internal function.
+## @end deftypefn
+
+function copy_built_files (desc, packdir, verbose)
+
+  src = fullfile (packdir, "src");
+  if (! exist (src, "dir"))
+    return
+  endif
+
+  ## Copy files to "inst" and "inst/arch" (this is instead of 'make install').
+  files = fullfile (src, "FILES");
+  instdir = fullfile (packdir, "inst");
+  archdir = fullfile (packdir, "inst", getarch ());
+
+  ## Get filenames.
+  if (exist (files, "file"))
+    [fid, msg] = fopen (files, "r");
+    if (fid < 0)
+      error ("couldn't open %s: %s", files, msg);
+    endif
+    filenames = char (fread (fid))';
+    fclose (fid);
+    if (filenames(end) == "\n")
+      filenames(end) = [];
+    endif
+    filenames = strtrim (ostrsplit (filenames, "\n"));
+    delete_idx = [];
+    for i = 1:length (filenames)
+      if (! all (isspace (filenames{i})))
+        filenames{i} = fullfile (src, filenames{i});
+      else
+        delete_idx(end+1) = i;
+      endif
+    endfor
+    filenames(delete_idx) = [];
+  else
+    m = dir (fullfile (src, "*.m"));
+    oct = dir (fullfile (src, "*.oct"));
+    mex = dir (fullfile (src, "*.mex"));
+
+    filenames = cellfun (@(x) fullfile (src, x),
+                         {m.name, oct.name, mex.name},
+                         "uniformoutput", false);
+  endif
+
+  ## Split into architecture dependent and independent files.
+  if (isempty (filenames))
+    idx = [];
+  else
+    idx = cellfun ("is_architecture_dependent", filenames);
+  endif
+  archdependent = filenames(idx);
+  archindependent = filenames(! idx);
+
+  ## Copy the files.
+  if (! all (isspace ([filenames{:}])))
+      if (! exist (instdir, "dir"))
+        mkdir (instdir);
+      endif
+      if (! all (isspace ([archindependent{:}])))
+        if (verbose)
+          printf ("copyfile");
+          printf (" %s", archindependent{:});
+          printf ("%s\n", instdir);
+        endif
+        [status, output] = copyfile (archindependent, instdir);
+        if (status != 1)
+          rmdir (desc.dir, "s");
+          error ("Couldn't copy files from 'src' to 'inst': %s", output);
+        endif
+      endif
+      if (! all (isspace ([archdependent{:}])))
+        if (verbose)
+          printf ("copyfile");
+          printf (" %s", archdependent{:});
+          printf (" %s\n", archdir);
+        endif
+        if (! exist (archdir, "dir"))
+          mkdir (archdir);
+        endif
+        [status, output] = copyfile (archdependent, archdir);
+        if (status != 1)
+          rmdir (desc.dir, "s");
+          error ("Couldn't copy files from 'src' to 'inst': %s", output);
+        endif
+      endif
+  endif
+endfunction
--- origsrc/octave-4.0.1/scripts/pkg/private/install.m	2015-04-28 18:12:02.000000000 +0200
+++ src/octave-4.0.1/scripts/pkg/private/install.m	2016-03-22 15:35:39.000000000 +0100
@@ -190,6 +190,7 @@ function install (files, handle_deps, au
       pdir = packdirs{i};
       prepare_installation (desc, pdir);
       configure_make (desc, pdir, verbose);
+      copy_built_files (desc, pdir, verbose);
     endfor
   catch
     ## Something went wrong, delete tmpdirs.
--- origsrc/octave-4.0.1/scripts/pkg/private/repackage.m	2015-04-28 18:12:02.000000000 +0200
+++ src/octave-4.0.1/scripts/pkg/private/repackage.m	1970-01-01 01:00:00.000000000 +0100
@@ -1,90 +0,0 @@
-## Copyright (C) 2005-2015 SÃ¸ren Hauberg
-## Copyright (C) 2010 VZLU Prague, a.s.
-##
-## This file is part of Octave.
-##
-## Octave is free software; you can redistribute it and/or modify it
-## under the terms of the GNU General Public License as published by
-## the Free Software Foundation; either version 3 of the License, or (at
-## your option) any later version.
-##
-## Octave is distributed in the hope that it will be useful, but
-## WITHOUT ANY WARRANTY; without even the implied warranty of
-## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
-## General Public License for more details.
-##
-## You should have received a copy of the GNU General Public License
-## along with Octave; see the file COPYING.  If not, see
-## <http://www.gnu.org/licenses/>.
-
-## -*- texinfo -*-
-## @deftypefn {Function File} {} repackage (@var{builddir}, @var{buildlist})
-## Undocumented internal function.
-## @end deftypefn
-
-function repackage (builddir, buildlist)
-  packages = installed_packages (buildlist, buildlist);
-
-  wd = pwd ();
-  for i = 1 : length (packages)
-    pack = packages{i};
-    unwind_protect
-      cd (builddir);
-      mkdir (pack.name);
-      mkdir (fullfile (pack.name, "inst"));
-      copyfile (fullfile (pack.dir, "*"), fullfile (pack.name, "inst"));
-      movefile (fullfile (pack.name, "inst","packinfo", "*"), pack.name);
-      if (exist (fullfile (pack.name, "inst","packinfo", ".autoload"), "file"))
-        unlink (fullfile (pack.name, "inst","packinfo", ".autoload"));
-      endif
-      rmdir (fullfile (pack.name, "inst", "packinfo"));
-      if (exist (fullfile (pack.name, "inst", "doc"), "dir"))
-        movefile (fullfile (pack.name, "inst", "doc"), pack.name);
-      endif
-      if (exist (fullfile (pack.name, "inst", "bin"), "dir"))
-        movefile (fullfile (pack.name, "inst", "bin"), pack.name);
-      endif
-      archdir = fullfile (pack.archprefix, [pack.name "-" pack.version],
-                          getarch ());
-      if (exist (archdir, "dir"))
-        if (exist (fullfile (pack.name, "inst", "PKG_ADD"), "file"))
-          unlink (fullfile (pack.name, "inst", "PKG_ADD"));
-        endif
-        if (exist (fullfile (pack.name, "inst", "PKG_DEL"), "file"))
-          unlink (fullfile (pack.name, "inst", "PKG_DEL"));
-        endif
-        if (exist (fullfile (archdir, "PKG_ADD"), "file"))
-          movefile (fullfile (archdir, "PKG_ADD"),
-                    fullfile (pack.name, "PKG_ADD"));
-        endif
-        if (exist (fullfile (archdir, "PKG_DEL"), "file"))
-          movefile (fullfile (archdir, "PKG_DEL"),
-                    fullfile (pack.name, "PKG_DEL"));
-        endif
-      else
-        if (exist (fullfile (pack.name, "inst", "PKG_ADD"), "file"))
-          movefile (fullfile (pack.name, "inst", "PKG_ADD"),
-                    fullfile (pack.name, "PKG_ADD"));
-        endif
-        if (exist (fullfile (pack.name, "inst", "PKG_DEL"), "file"))
-          movefile (fullfile (pack.name, "inst", "PKG_DEL"),
-                    fullfile (pack.name, "PKG_DEL"));
-        endif
-      endif
-      tfile = [pack.name "-" pack.version ".tar"];
-      tar (tfile, pack.name);
-      try
-        gzip (tfile);
-        unlink (tfile);
-      catch
-        warning ("failed to compress %s", tfile);
-      end_try_catch
-    unwind_protect_cleanup
-      if (exist (pack.name, "dir"))
-        rmdir (pack.name, "s");
-      endif
-      cd (wd);
-    end_unwind_protect
-  endfor
-endfunction
-
