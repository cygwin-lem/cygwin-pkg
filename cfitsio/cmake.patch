--- origsrc/cfitsio/CMakeLists.txt	2014-08-19 23:23:17.000000000 +0200
+++ src/cfitsio/CMakeLists.txt	2015-07-09 22:48:16.885447900 +0200
@@ -4,16 +4,18 @@ CMAKE_MINIMUM_REQUIRED(VERSION 2.8.0)
 # Allow the developer to select if Dynamic or Static libraries are built
 OPTION (BUILD_SHARED_LIBS "Build Shared Libraries" ON)
 OPTION (USE_PTHREADS "Thread-safe build (using pthreads)" OFF)
+option(ENABLE_ZLIB "Enable compression using ZLIB" ON)
 
 set(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} "${CMAKE_SOURCE_DIR}")
-set (LIB_DESTINATION "${CMAKE_INSTALL_PREFIX}/lib${LIB_SUFFIX}")
-set (INCLUDE_INSTALL_DIR "${CMAKE_INSTALL_PREFIX}/include/")
+set(BIN_DESTINATION "${CMAKE_INSTALL_PREFIX}/bin")
+set(LIB_DESTINATION "${CMAKE_INSTALL_PREFIX}/lib")
+set(INCLUDE_INSTALL_DIR "${CMAKE_INSTALL_PREFIX}/include/")
 
 # Define project version
 SET(${PROJECT_NAME}_MAJOR_VERSION 3)
 SET(${PROJECT_NAME}_MINOR_VERSION 36)
 SET(${PROJECT_NAME}_VERSION ${${PROJECT_NAME}_MAJOR_VERSION}.${${PROJECT_NAME}_MINOR_VERSION})
-SET(LIB_NAME cfitsio)
+SET(LIB_NAME "cfitsio")
 
 # Define
 IF(MSVC)
@@ -36,6 +38,17 @@ IF (USE_PTHREADS)
     ADD_DEFINITIONS(-D_REENTRANT)
 ENDIF()
 
+if(ENABLE_ZLIB)
+  find_package(ZLIB)
+  if(ZLIB_FOUND)
+    add_definitions(-DHAVE_ZLIB)
+    list(APPEND EXTERNAL_INCLUDES ${ZLIB_INCLUDE_DIR})
+    list(APPEND EXTERNAL_LIBRARIES ${ZLIB_LIBRARIES})
+  endif(ZLIB_FOUND)
+endif(ENABLE_ZLIB)
+
+include_directories(${EXTERNAL_INCLUDES})
+
 SET(SRC_FILES
     buffers.c cfileio.c checksum.c drvrfile.c drvrmem.c
     drvrnet.c drvrsmem.c drvrgsiftp.c editcol.c edithdu.c eval_l.c
@@ -47,36 +60,48 @@ SET(SRC_FILES
     putcolj.c putcolk.c putcoluk.c putcoll.c putcols.c putcolsb.c
     putcolu.c putcolui.c putcoluj.c putkey.c region.c scalnull.c
     swapproc.c wcssub.c wcsutil.c imcompress.c quantize.c ricecomp.c
-    pliocomp.c fits_hcompress.c fits_hdecompress.c zlib/zuncompress.c
-    zlib/zcompress.c zlib/adler32.c zlib/crc32.c zlib/inffast.c
-    zlib/inftrees.c zlib/trees.c zlib/zutil.c zlib/deflate.c
-    zlib/infback.c zlib/inflate.c zlib/uncompr.c simplerng.c
+    pliocomp.c fits_hcompress.c fits_hdecompress.c 
+    zlib/zcompress.c zlib/zuncompress.c simplerng.c
     f77_wrap1.c f77_wrap2.c f77_wrap3.c f77_wrap4.c
 )
 
 ADD_LIBRARY(${LIB_NAME} ${LIB_TYPE} ${H_FILES} ${SRC_FILES})
-TARGET_LINK_LIBRARIES(${LIB_NAME} m ${PTHREADS_LIBRARY}
+TARGET_LINK_LIBRARIES(${LIB_NAME} m ${PTHREADS_LIBRARY} ${EXTERNAL_LIBRARIES} 
 )
 
 SET_TARGET_PROPERTIES(${LIB_NAME} PROPERTIES VERSION ${${PROJECT_NAME}_VERSION} SOVERSION ${${PROJECT_NAME}_MAJOR_VERSION})
-install(TARGETS ${LIB_NAME} LIBRARY DESTINATION ${LIB_DESTINATION})
-install(FILES ${H_FILES} DESTINATION ${INCLUDE_INSTALL_DIR} COMPONENT Devel)
 
 ENABLE_TESTING()
 
 ADD_EXECUTABLE(TestProg testprog.c)
-TARGET_LINK_LIBRARIES(TestProg ${LIB_NAME})
+TARGET_LINK_LIBRARIES(TestProg ${LIB_NAME} ${EXTERNAL_LIBRARIES} )
 ADD_TEST(TestProg TestProg)
 
 ADD_EXECUTABLE(cookbook cookbook.c)
-TARGET_LINK_LIBRARIES(cookbook ${LIB_NAME})
+TARGET_LINK_LIBRARIES(cookbook ${LIB_NAME} ${EXTERNAL_LIBRARIES} )
 ADD_TEST(cookbook cookbook)
 
-ADD_EXECUTABLE(FPack fpack.c fpackutil.c)
-TARGET_LINK_LIBRARIES(FPack ${LIB_NAME})
+ADD_EXECUTABLE(fpack fpack.c fpackutil.c)
+TARGET_LINK_LIBRARIES(fpack ${LIB_NAME} ${EXTERNAL_LIBRARIES})
+
+ADD_EXECUTABLE(funpack funpack.c fpackutil.c)
+TARGET_LINK_LIBRARIES(funpack ${LIB_NAME} ${EXTERNAL_LIBRARIES})
+
+ADD_EXECUTABLE(fitscopy fitscopy.c)
+TARGET_LINK_LIBRARIES(fitscopy ${LIB_NAME} ${EXTERNAL_LIBRARIES})
 
-ADD_EXECUTABLE(Funpack funpack.c fpackutil.c)
-TARGET_LINK_LIBRARIES(Funpack ${LIB_NAME})
+ADD_EXECUTABLE(speed speed.c)
+TARGET_LINK_LIBRARIES(speed ${LIB_NAME} ${EXTERNAL_LIBRARIES})
+
+ADD_EXECUTABLE(imcopy imcopy.c)
+TARGET_LINK_LIBRARIES(imcopy ${LIB_NAME} ${EXTERNAL_LIBRARIES})
+
+install(TARGETS ${LIB_NAME} fitscopy funpack fpack cookbook speed imcopy
+        RUNTIME DESTINATION ${BIN_DESTINATION}
+        LIBRARY DESTINATION ${LIB_DESTINATION}
+        ARCHIVE DESTINATION ${LIB_DESTINATION})
+install(FILES ${H_FILES}
+        DESTINATION ${INCLUDE_INSTALL_DIR} COMPONENT Devel)
 
 # To expands the command line arguments in Windows, see:
 # http://msdn.microsoft.com/en-us/library/8bch7bkk.aspx
